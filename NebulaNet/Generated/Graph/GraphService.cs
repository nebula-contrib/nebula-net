/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Graph
{
  public partial class GraphService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task signout(long sessionId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> executeWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> executeJsonWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default)
      {
        await send_authenticate(username, password, cancellationToken);
        return await recv_authenticate(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_authenticate(byte[] username, byte[] password, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp71 = new InternalStructs.authenticate_args() {
          Username = username,
          Password = password,
        };
        
        await tmp71.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.AuthResponse> recv_authenticate(CancellationToken cancellationToken = default)
      {
        
        var tmp72 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp72.Type == TMessageType.Exception)
        {
          var tmp73 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp73;
        }

        var tmp74 = new InternalStructs.authenticate_result();
        await tmp74.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp74.__isset.success)
        {
          return tmp74.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticate failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task signout(long sessionId, CancellationToken cancellationToken = default)
      {
        await send_signout(sessionId, cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_signout(long sessionId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("signout", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp75 = new InternalStructs.signout_args() {
          SessionId = sessionId,
        };
        
        await tmp75.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await send_execute(sessionId, stmt, cancellationToken);
        return await recv_execute(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_execute(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp76 = new InternalStructs.execute_args() {
          SessionId = sessionId,
          Stmt = stmt,
        };
        
        await tmp76.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> recv_execute(CancellationToken cancellationToken = default)
      {
        
        var tmp77 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp77.Type == TMessageType.Exception)
        {
          var tmp78 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp78;
        }

        var tmp79 = new InternalStructs.execute_result();
        await tmp79.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp79.__isset.success)
        {
          return tmp79.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "execute failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> executeWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default)
      {
        await send_executeWithParameter(sessionId, stmt, parameterMap, cancellationToken);
        return await recv_executeWithParameter(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeWithParameter", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp80 = new InternalStructs.executeWithParameter_args() {
          SessionId = sessionId,
          Stmt = stmt,
          ParameterMap = parameterMap,
        };
        
        await tmp80.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.ExecutionResponse> recv_executeWithParameter(CancellationToken cancellationToken = default)
      {
        
        var tmp81 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp81.Type == TMessageType.Exception)
        {
          var tmp82 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp82;
        }

        var tmp83 = new InternalStructs.executeWithParameter_result();
        await tmp83.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp83.__isset.success)
        {
          return tmp83.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeWithParameter failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await send_executeJson(sessionId, stmt, cancellationToken);
        return await recv_executeJson(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeJson(long sessionId, byte[] stmt, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp84 = new InternalStructs.executeJson_args() {
          SessionId = sessionId,
          Stmt = stmt,
        };
        
        await tmp84.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_executeJson(CancellationToken cancellationToken = default)
      {
        
        var tmp85 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp85.Type == TMessageType.Exception)
        {
          var tmp86 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp86;
        }

        var tmp87 = new InternalStructs.executeJson_result();
        await tmp87.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp87.__isset.success)
        {
          return tmp87.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeJson failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> executeJsonWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default)
      {
        await send_executeJsonWithParameter(sessionId, stmt, parameterMap, cancellationToken);
        return await recv_executeJsonWithParameter(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeJsonWithParameter(long sessionId, byte[] stmt, Dictionary<byte[], global::Nebula.Common.@Value> parameterMap, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeJsonWithParameter", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp88 = new InternalStructs.executeJsonWithParameter_args() {
          SessionId = sessionId,
          Stmt = stmt,
          ParameterMap = parameterMap,
        };
        
        await tmp88.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_executeJsonWithParameter(CancellationToken cancellationToken = default)
      {
        
        var tmp89 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp89.Type == TMessageType.Exception)
        {
          var tmp90 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp90;
        }

        var tmp91 = new InternalStructs.executeJsonWithParameter_result();
        await tmp91.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp91.__isset.success)
        {
          return tmp91.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeJsonWithParameter failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await send_verifyClientVersion(req, cancellationToken);
        return await recv_verifyClientVersion(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_verifyClientVersion(global::Nebula.Graph.VerifyClientVersionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp92 = new InternalStructs.verifyClientVersion_args() {
          Req = req,
        };
        
        await tmp92.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Graph.VerifyClientVersionResp> recv_verifyClientVersion(CancellationToken cancellationToken = default)
      {
        
        var tmp93 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp93.Type == TMessageType.Exception)
        {
          var tmp94 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp94;
        }

        var tmp95 = new InternalStructs.verifyClientVersion_result();
        await tmp95.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp95.__isset.success)
        {
          return tmp95.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyClientVersion failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["authenticate"] = authenticate_ProcessAsync;
        processMap_["signout"] = signout_ProcessAsync;
        processMap_["execute"] = execute_ProcessAsync;
        processMap_["executeWithParameter"] = executeWithParameter_ProcessAsync;
        processMap_["executeJson"] = executeJson_ProcessAsync;
        processMap_["executeJsonWithParameter"] = executeJsonWithParameter_ProcessAsync;
        processMap_["verifyClientVersion"] = verifyClientVersion_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task authenticate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp96 = new InternalStructs.authenticate_args();
        await tmp96.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp97 = new InternalStructs.authenticate_result();
        try
        {
          tmp97.Success = await _iAsync.authenticate(tmp96.Username, tmp96.Password, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Reply, seqid), cancellationToken); 
          await tmp97.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp98)
        {
          var tmp99 = $"Error occurred in {GetType().FullName}: {tmp98.Message}";
          if(_logger != null)
            _logger.LogError(tmp98, tmp99);
          else
            Console.Error.WriteLine(tmp99);
          var tmp100 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("authenticate", TMessageType.Exception, seqid), cancellationToken);
          await tmp100.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task signout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp101 = new InternalStructs.signout_args();
        await tmp101.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.signout(tmp101.SessionId, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp103)
        {
          var tmp104 = $"Error occurred in {GetType().FullName}: {tmp103.Message}";
          if(_logger != null)
            _logger.LogError(tmp103, tmp104);
          else
            Console.Error.WriteLine(tmp104);
        }
      }

      public async global::System.Threading.Tasks.Task execute_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp105 = new InternalStructs.execute_args();
        await tmp105.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp106 = new InternalStructs.execute_result();
        try
        {
          tmp106.Success = await _iAsync.execute(tmp105.SessionId, tmp105.Stmt, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Reply, seqid), cancellationToken); 
          await tmp106.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp107)
        {
          var tmp108 = $"Error occurred in {GetType().FullName}: {tmp107.Message}";
          if(_logger != null)
            _logger.LogError(tmp107, tmp108);
          else
            Console.Error.WriteLine(tmp108);
          var tmp109 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Exception, seqid), cancellationToken);
          await tmp109.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeWithParameter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp110 = new InternalStructs.executeWithParameter_args();
        await tmp110.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp111 = new InternalStructs.executeWithParameter_result();
        try
        {
          tmp111.Success = await _iAsync.executeWithParameter(tmp110.SessionId, tmp110.Stmt, tmp110.ParameterMap, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeWithParameter", TMessageType.Reply, seqid), cancellationToken); 
          await tmp111.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp112)
        {
          var tmp113 = $"Error occurred in {GetType().FullName}: {tmp112.Message}";
          if(_logger != null)
            _logger.LogError(tmp112, tmp113);
          else
            Console.Error.WriteLine(tmp113);
          var tmp114 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeWithParameter", TMessageType.Exception, seqid), cancellationToken);
          await tmp114.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeJson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp115 = new InternalStructs.executeJson_args();
        await tmp115.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp116 = new InternalStructs.executeJson_result();
        try
        {
          tmp116.Success = await _iAsync.executeJson(tmp115.SessionId, tmp115.Stmt, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Reply, seqid), cancellationToken); 
          await tmp116.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp117)
        {
          var tmp118 = $"Error occurred in {GetType().FullName}: {tmp117.Message}";
          if(_logger != null)
            _logger.LogError(tmp117, tmp118);
          else
            Console.Error.WriteLine(tmp118);
          var tmp119 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeJson", TMessageType.Exception, seqid), cancellationToken);
          await tmp119.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeJsonWithParameter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp120 = new InternalStructs.executeJsonWithParameter_args();
        await tmp120.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp121 = new InternalStructs.executeJsonWithParameter_result();
        try
        {
          tmp121.Success = await _iAsync.executeJsonWithParameter(tmp120.SessionId, tmp120.Stmt, tmp120.ParameterMap, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeJsonWithParameter", TMessageType.Reply, seqid), cancellationToken); 
          await tmp121.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp122)
        {
          var tmp123 = $"Error occurred in {GetType().FullName}: {tmp122.Message}";
          if(_logger != null)
            _logger.LogError(tmp122, tmp123);
          else
            Console.Error.WriteLine(tmp123);
          var tmp124 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeJsonWithParameter", TMessageType.Exception, seqid), cancellationToken);
          await tmp124.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task verifyClientVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp125 = new InternalStructs.verifyClientVersion_args();
        await tmp125.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp126 = new InternalStructs.verifyClientVersion_result();
        try
        {
          tmp126.Success = await _iAsync.verifyClientVersion(tmp125.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Reply, seqid), cancellationToken); 
          await tmp126.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp127)
        {
          var tmp128 = $"Error occurred in {GetType().FullName}: {tmp127.Message}";
          if(_logger != null)
            _logger.LogError(tmp127, tmp128);
          else
            Console.Error.WriteLine(tmp128);
          var tmp129 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("verifyClientVersion", TMessageType.Exception, seqid), cancellationToken);
          await tmp129.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class authenticate_args : TBase
      {
        private byte[] _username;
        private byte[] _password;

        public byte[] Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.username = true;
            this._username = value;
          }
        }

        public byte[] Password
        {
          get
          {
            return _password;
          }
          set
          {
            __isset.password = true;
            this._password = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool username;
          public bool password;
        }

        public authenticate_args()
        {
        }

        public authenticate_args DeepCopy()
        {
          var tmp130 = new authenticate_args();
          if((Username != null) && __isset.username)
          {
            tmp130.Username = this.Username.ToArray();
          }
          tmp130.__isset.username = this.__isset.username;
          if((Password != null) && __isset.password)
          {
            tmp130.Password = this.Password.ToArray();
          }
          tmp130.__isset.password = this.__isset.password;
          return tmp130;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Password = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp131 = new TStruct("authenticate_args");
            await oprot.WriteStructBeginAsync(tmp131, cancellationToken);
            var tmp132 = new TField();
            if((Username != null) && __isset.username)
            {
              tmp132.Name = "username";
              tmp132.Type = TType.String;
              tmp132.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp132, cancellationToken);
              await oprot.WriteBinaryAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Password != null) && __isset.password)
            {
              tmp132.Name = "password";
              tmp132.Type = TType.String;
              tmp132.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp132, cancellationToken);
              await oprot.WriteBinaryAsync(Password, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticate_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.username == other.__isset.username) && ((!__isset.username) || (TCollections.Equals(Username, other.Username))))
            && ((__isset.password == other.__isset.password) && ((!__isset.password) || (TCollections.Equals(Password, other.Password))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
            if((Password != null) && __isset.password)
            {
              hashcode = (hashcode * 397) + Password.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp133 = new StringBuilder("authenticate_args(");
          int tmp134 = 0;
          if((Username != null) && __isset.username)
          {
            if(0 < tmp134++) { tmp133.Append(", "); }
            tmp133.Append("Username: ");
            Username.ToString(tmp133);
          }
          if((Password != null) && __isset.password)
          {
            if(0 < tmp134++) { tmp133.Append(", "); }
            tmp133.Append("Password: ");
            Password.ToString(tmp133);
          }
          tmp133.Append(')');
          return tmp133.ToString();
        }
      }


      public partial class authenticate_result : TBase
      {
        private global::Nebula.Graph.AuthResponse _success;

        public global::Nebula.Graph.AuthResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public authenticate_result()
        {
        }

        public authenticate_result DeepCopy()
        {
          var tmp135 = new authenticate_result();
          if((Success != null) && __isset.success)
          {
            tmp135.Success = (global::Nebula.Graph.AuthResponse)this.Success.DeepCopy();
          }
          tmp135.__isset.success = this.__isset.success;
          return tmp135;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.AuthResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp136 = new TStruct("authenticate_result");
            await oprot.WriteStructBeginAsync(tmp136, cancellationToken);
            var tmp137 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp137.Name = "Success";
                tmp137.Type = TType.Struct;
                tmp137.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is authenticate_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp138 = new StringBuilder("authenticate_result(");
          int tmp139 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp139++) { tmp138.Append(", "); }
            tmp138.Append("Success: ");
            Success.ToString(tmp138);
          }
          tmp138.Append(')');
          return tmp138.ToString();
        }
      }


      public partial class signout_args : TBase
      {
        private long _sessionId;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
        }

        public signout_args()
        {
        }

        public signout_args DeepCopy()
        {
          var tmp140 = new signout_args();
          if(__isset.sessionId)
          {
            tmp140.SessionId = this.SessionId;
          }
          tmp140.__isset.sessionId = this.__isset.sessionId;
          return tmp140;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp141 = new TStruct("signout_args");
            await oprot.WriteStructBeginAsync(tmp141, cancellationToken);
            var tmp142 = new TField();
            if(__isset.sessionId)
            {
              tmp142.Name = "sessionId";
              tmp142.Type = TType.I64;
              tmp142.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp142, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is signout_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp143 = new StringBuilder("signout_args(");
          int tmp144 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp144++) { tmp143.Append(", "); }
            tmp143.Append("SessionId: ");
            SessionId.ToString(tmp143);
          }
          tmp143.Append(')');
          return tmp143.ToString();
        }
      }


      public partial class execute_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
        }

        public execute_args()
        {
        }

        public execute_args DeepCopy()
        {
          var tmp145 = new execute_args();
          if(__isset.sessionId)
          {
            tmp145.SessionId = this.SessionId;
          }
          tmp145.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp145.Stmt = this.Stmt.ToArray();
          }
          tmp145.__isset.stmt = this.__isset.stmt;
          return tmp145;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp146 = new TStruct("execute_args");
            await oprot.WriteStructBeginAsync(tmp146, cancellationToken);
            var tmp147 = new TField();
            if(__isset.sessionId)
            {
              tmp147.Name = "sessionId";
              tmp147.Type = TType.I64;
              tmp147.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp147.Name = "stmt";
              tmp147.Type = TType.String;
              tmp147.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp148 = new StringBuilder("execute_args(");
          int tmp149 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp149++) { tmp148.Append(", "); }
            tmp148.Append("SessionId: ");
            SessionId.ToString(tmp148);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp149++) { tmp148.Append(", "); }
            tmp148.Append("Stmt: ");
            Stmt.ToString(tmp148);
          }
          tmp148.Append(')');
          return tmp148.ToString();
        }
      }


      public partial class execute_result : TBase
      {
        private global::Nebula.Graph.ExecutionResponse _success;

        public global::Nebula.Graph.ExecutionResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public execute_result()
        {
        }

        public execute_result DeepCopy()
        {
          var tmp150 = new execute_result();
          if((Success != null) && __isset.success)
          {
            tmp150.Success = (global::Nebula.Graph.ExecutionResponse)this.Success.DeepCopy();
          }
          tmp150.__isset.success = this.__isset.success;
          return tmp150;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.ExecutionResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp151 = new TStruct("execute_result");
            await oprot.WriteStructBeginAsync(tmp151, cancellationToken);
            var tmp152 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp152.Name = "Success";
                tmp152.Type = TType.Struct;
                tmp152.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp153 = new StringBuilder("execute_result(");
          int tmp154 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp154++) { tmp153.Append(", "); }
            tmp153.Append("Success: ");
            Success.ToString(tmp153);
          }
          tmp153.Append(')');
          return tmp153.ToString();
        }
      }


      public partial class executeWithParameter_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;
        private Dictionary<byte[], global::Nebula.Common.@Value> _parameterMap;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }

        public Dictionary<byte[], global::Nebula.Common.@Value> ParameterMap
        {
          get
          {
            return _parameterMap;
          }
          set
          {
            __isset.parameterMap = true;
            this._parameterMap = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
          public bool parameterMap;
        }

        public executeWithParameter_args()
        {
        }

        public executeWithParameter_args DeepCopy()
        {
          var tmp155 = new executeWithParameter_args();
          if(__isset.sessionId)
          {
            tmp155.SessionId = this.SessionId;
          }
          tmp155.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp155.Stmt = this.Stmt.ToArray();
          }
          tmp155.__isset.stmt = this.__isset.stmt;
          if((ParameterMap != null) && __isset.parameterMap)
          {
            tmp155.ParameterMap = this.ParameterMap.DeepCopy();
          }
          tmp155.__isset.parameterMap = this.__isset.parameterMap;
          return tmp155;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      TMap _map156 = await iprot.ReadMapBeginAsync(cancellationToken);
                      ParameterMap = new Dictionary<byte[], global::Nebula.Common.@Value>(_map156.Count);
                      for(int _i157 = 0; _i157 < _map156.Count; ++_i157)
                      {
                        byte[] _key158;
                        global::Nebula.Common.@Value _val159;
                        _key158 = await iprot.ReadBinaryAsync(cancellationToken);
                        _val159 = new global::Nebula.Common.@Value();
                        await _val159.ReadAsync(iprot, cancellationToken);
                        ParameterMap[_key158] = _val159;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp160 = new TStruct("executeWithParameter_args");
            await oprot.WriteStructBeginAsync(tmp160, cancellationToken);
            var tmp161 = new TField();
            if(__isset.sessionId)
            {
              tmp161.Name = "sessionId";
              tmp161.Type = TType.I64;
              tmp161.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp161, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp161.Name = "stmt";
              tmp161.Type = TType.String;
              tmp161.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp161, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ParameterMap != null) && __isset.parameterMap)
            {
              tmp161.Name = "parameterMap";
              tmp161.Type = TType.Map;
              tmp161.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp161, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, ParameterMap.Count), cancellationToken);
                foreach (byte[] _iter162 in ParameterMap.Keys)
                {
                  await oprot.WriteBinaryAsync(_iter162, cancellationToken);
                  await ParameterMap[_iter162].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeWithParameter_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))))
            && ((__isset.parameterMap == other.__isset.parameterMap) && ((!__isset.parameterMap) || (TCollections.Equals(ParameterMap, other.ParameterMap))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
            if((ParameterMap != null) && __isset.parameterMap)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ParameterMap);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp163 = new StringBuilder("executeWithParameter_args(");
          int tmp164 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp164++) { tmp163.Append(", "); }
            tmp163.Append("SessionId: ");
            SessionId.ToString(tmp163);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp164++) { tmp163.Append(", "); }
            tmp163.Append("Stmt: ");
            Stmt.ToString(tmp163);
          }
          if((ParameterMap != null) && __isset.parameterMap)
          {
            if(0 < tmp164++) { tmp163.Append(", "); }
            tmp163.Append("ParameterMap: ");
            ParameterMap.ToString(tmp163);
          }
          tmp163.Append(')');
          return tmp163.ToString();
        }
      }


      public partial class executeWithParameter_result : TBase
      {
        private global::Nebula.Graph.ExecutionResponse _success;

        public global::Nebula.Graph.ExecutionResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeWithParameter_result()
        {
        }

        public executeWithParameter_result DeepCopy()
        {
          var tmp165 = new executeWithParameter_result();
          if((Success != null) && __isset.success)
          {
            tmp165.Success = (global::Nebula.Graph.ExecutionResponse)this.Success.DeepCopy();
          }
          tmp165.__isset.success = this.__isset.success;
          return tmp165;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.ExecutionResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp166 = new TStruct("executeWithParameter_result");
            await oprot.WriteStructBeginAsync(tmp166, cancellationToken);
            var tmp167 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp167.Name = "Success";
                tmp167.Type = TType.Struct;
                tmp167.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp167, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeWithParameter_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp168 = new StringBuilder("executeWithParameter_result(");
          int tmp169 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp169++) { tmp168.Append(", "); }
            tmp168.Append("Success: ");
            Success.ToString(tmp168);
          }
          tmp168.Append(')');
          return tmp168.ToString();
        }
      }


      public partial class executeJson_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
        }

        public executeJson_args()
        {
        }

        public executeJson_args DeepCopy()
        {
          var tmp170 = new executeJson_args();
          if(__isset.sessionId)
          {
            tmp170.SessionId = this.SessionId;
          }
          tmp170.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp170.Stmt = this.Stmt.ToArray();
          }
          tmp170.__isset.stmt = this.__isset.stmt;
          return tmp170;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp171 = new TStruct("executeJson_args");
            await oprot.WriteStructBeginAsync(tmp171, cancellationToken);
            var tmp172 = new TField();
            if(__isset.sessionId)
            {
              tmp172.Name = "sessionId";
              tmp172.Type = TType.I64;
              tmp172.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp172, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp172.Name = "stmt";
              tmp172.Type = TType.String;
              tmp172.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp172, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJson_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp173 = new StringBuilder("executeJson_args(");
          int tmp174 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp174++) { tmp173.Append(", "); }
            tmp173.Append("SessionId: ");
            SessionId.ToString(tmp173);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp174++) { tmp173.Append(", "); }
            tmp173.Append("Stmt: ");
            Stmt.ToString(tmp173);
          }
          tmp173.Append(')');
          return tmp173.ToString();
        }
      }


      public partial class executeJson_result : TBase
      {
        private byte[] _success;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeJson_result()
        {
        }

        public executeJson_result DeepCopy()
        {
          var tmp175 = new executeJson_result();
          if((Success != null) && __isset.success)
          {
            tmp175.Success = this.Success.ToArray();
          }
          tmp175.__isset.success = this.__isset.success;
          return tmp175;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp176 = new TStruct("executeJson_result");
            await oprot.WriteStructBeginAsync(tmp176, cancellationToken);
            var tmp177 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp177.Name = "Success";
                tmp177.Type = TType.String;
                tmp177.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJson_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp178 = new StringBuilder("executeJson_result(");
          int tmp179 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp179++) { tmp178.Append(", "); }
            tmp178.Append("Success: ");
            Success.ToString(tmp178);
          }
          tmp178.Append(')');
          return tmp178.ToString();
        }
      }


      public partial class executeJsonWithParameter_args : TBase
      {
        private long _sessionId;
        private byte[] _stmt;
        private Dictionary<byte[], global::Nebula.Common.@Value> _parameterMap;

        public long SessionId
        {
          get
          {
            return _sessionId;
          }
          set
          {
            __isset.sessionId = true;
            this._sessionId = value;
          }
        }

        public byte[] Stmt
        {
          get
          {
            return _stmt;
          }
          set
          {
            __isset.stmt = true;
            this._stmt = value;
          }
        }

        public Dictionary<byte[], global::Nebula.Common.@Value> ParameterMap
        {
          get
          {
            return _parameterMap;
          }
          set
          {
            __isset.parameterMap = true;
            this._parameterMap = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool sessionId;
          public bool stmt;
          public bool parameterMap;
        }

        public executeJsonWithParameter_args()
        {
        }

        public executeJsonWithParameter_args DeepCopy()
        {
          var tmp180 = new executeJsonWithParameter_args();
          if(__isset.sessionId)
          {
            tmp180.SessionId = this.SessionId;
          }
          tmp180.__isset.sessionId = this.__isset.sessionId;
          if((Stmt != null) && __isset.stmt)
          {
            tmp180.Stmt = this.Stmt.ToArray();
          }
          tmp180.__isset.stmt = this.__isset.stmt;
          if((ParameterMap != null) && __isset.parameterMap)
          {
            tmp180.ParameterMap = this.ParameterMap.DeepCopy();
          }
          tmp180.__isset.parameterMap = this.__isset.parameterMap;
          return tmp180;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    SessionId = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Stmt = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      TMap _map181 = await iprot.ReadMapBeginAsync(cancellationToken);
                      ParameterMap = new Dictionary<byte[], global::Nebula.Common.@Value>(_map181.Count);
                      for(int _i182 = 0; _i182 < _map181.Count; ++_i182)
                      {
                        byte[] _key183;
                        global::Nebula.Common.@Value _val184;
                        _key183 = await iprot.ReadBinaryAsync(cancellationToken);
                        _val184 = new global::Nebula.Common.@Value();
                        await _val184.ReadAsync(iprot, cancellationToken);
                        ParameterMap[_key183] = _val184;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp185 = new TStruct("executeJsonWithParameter_args");
            await oprot.WriteStructBeginAsync(tmp185, cancellationToken);
            var tmp186 = new TField();
            if(__isset.sessionId)
            {
              tmp186.Name = "sessionId";
              tmp186.Type = TType.I64;
              tmp186.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              await oprot.WriteI64Async(SessionId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Stmt != null) && __isset.stmt)
            {
              tmp186.Name = "stmt";
              tmp186.Type = TType.String;
              tmp186.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              await oprot.WriteBinaryAsync(Stmt, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ParameterMap != null) && __isset.parameterMap)
            {
              tmp186.Name = "parameterMap";
              tmp186.Type = TType.Map;
              tmp186.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, ParameterMap.Count), cancellationToken);
                foreach (byte[] _iter187 in ParameterMap.Keys)
                {
                  await oprot.WriteBinaryAsync(_iter187, cancellationToken);
                  await ParameterMap[_iter187].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJsonWithParameter_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (System.Object.Equals(SessionId, other.SessionId))))
            && ((__isset.stmt == other.__isset.stmt) && ((!__isset.stmt) || (TCollections.Equals(Stmt, other.Stmt))))
            && ((__isset.parameterMap == other.__isset.parameterMap) && ((!__isset.parameterMap) || (TCollections.Equals(ParameterMap, other.ParameterMap))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.sessionId)
            {
              hashcode = (hashcode * 397) + SessionId.GetHashCode();
            }
            if((Stmt != null) && __isset.stmt)
            {
              hashcode = (hashcode * 397) + Stmt.GetHashCode();
            }
            if((ParameterMap != null) && __isset.parameterMap)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(ParameterMap);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp188 = new StringBuilder("executeJsonWithParameter_args(");
          int tmp189 = 0;
          if(__isset.sessionId)
          {
            if(0 < tmp189++) { tmp188.Append(", "); }
            tmp188.Append("SessionId: ");
            SessionId.ToString(tmp188);
          }
          if((Stmt != null) && __isset.stmt)
          {
            if(0 < tmp189++) { tmp188.Append(", "); }
            tmp188.Append("Stmt: ");
            Stmt.ToString(tmp188);
          }
          if((ParameterMap != null) && __isset.parameterMap)
          {
            if(0 < tmp189++) { tmp188.Append(", "); }
            tmp188.Append("ParameterMap: ");
            ParameterMap.ToString(tmp188);
          }
          tmp188.Append(')');
          return tmp188.ToString();
        }
      }


      public partial class executeJsonWithParameter_result : TBase
      {
        private byte[] _success;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeJsonWithParameter_result()
        {
        }

        public executeJsonWithParameter_result DeepCopy()
        {
          var tmp190 = new executeJsonWithParameter_result();
          if((Success != null) && __isset.success)
          {
            tmp190.Success = this.Success.ToArray();
          }
          tmp190.__isset.success = this.__isset.success;
          return tmp190;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp191 = new TStruct("executeJsonWithParameter_result");
            await oprot.WriteStructBeginAsync(tmp191, cancellationToken);
            var tmp192 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp192.Name = "Success";
                tmp192.Type = TType.String;
                tmp192.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp192, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeJsonWithParameter_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp193 = new StringBuilder("executeJsonWithParameter_result(");
          int tmp194 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp194++) { tmp193.Append(", "); }
            tmp193.Append("Success: ");
            Success.ToString(tmp193);
          }
          tmp193.Append(')');
          return tmp193.ToString();
        }
      }


      public partial class verifyClientVersion_args : TBase
      {
        private global::Nebula.Graph.VerifyClientVersionReq _req;

        public global::Nebula.Graph.VerifyClientVersionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public verifyClientVersion_args()
        {
        }

        public verifyClientVersion_args DeepCopy()
        {
          var tmp195 = new verifyClientVersion_args();
          if((Req != null) && __isset.req)
          {
            tmp195.Req = (global::Nebula.Graph.VerifyClientVersionReq)this.Req.DeepCopy();
          }
          tmp195.__isset.req = this.__isset.req;
          return tmp195;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Graph.VerifyClientVersionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp196 = new TStruct("verifyClientVersion_args");
            await oprot.WriteStructBeginAsync(tmp196, cancellationToken);
            var tmp197 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp197.Name = "req";
              tmp197.Type = TType.Struct;
              tmp197.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp197, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp198 = new StringBuilder("verifyClientVersion_args(");
          int tmp199 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp199++) { tmp198.Append(", "); }
            tmp198.Append("Req: ");
            Req.ToString(tmp198);
          }
          tmp198.Append(')');
          return tmp198.ToString();
        }
      }


      public partial class verifyClientVersion_result : TBase
      {
        private global::Nebula.Graph.VerifyClientVersionResp _success;

        public global::Nebula.Graph.VerifyClientVersionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public verifyClientVersion_result()
        {
        }

        public verifyClientVersion_result DeepCopy()
        {
          var tmp200 = new verifyClientVersion_result();
          if((Success != null) && __isset.success)
          {
            tmp200.Success = (global::Nebula.Graph.VerifyClientVersionResp)this.Success.DeepCopy();
          }
          tmp200.__isset.success = this.__isset.success;
          return tmp200;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Graph.VerifyClientVersionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp201 = new TStruct("verifyClientVersion_result");
            await oprot.WriteStructBeginAsync(tmp201, cancellationToken);
            var tmp202 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp202.Name = "Success";
                tmp202.Type = TType.Struct;
                tmp202.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp202, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is verifyClientVersion_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp203 = new StringBuilder("verifyClientVersion_result(");
          int tmp204 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp204++) { tmp203.Append(", "); }
            tmp203.Append("Success: ");
            Success.ToString(tmp203);
          }
          tmp203.Append(')');
          return tmp203.ToString();
        }
      }

    }

  }
}
