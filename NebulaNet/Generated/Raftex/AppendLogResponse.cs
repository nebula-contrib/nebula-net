/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Raftex
{

  public partial class AppendLogResponse : TBase
  {
    private global::Nebula.Common.ErrorCode _error_code;
    private long _current_term;
    private string _leader_addr;
    private int _leader_port;
    private long _committed_log_id;
    private long _last_matched_log_id;
    private long _last_matched_log_term;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Common.ErrorCode"/>
    /// </summary>
    public global::Nebula.Common.ErrorCode Error_code
    {
      get
      {
        return _error_code;
      }
      set
      {
        __isset.error_code = true;
        this._error_code = value;
      }
    }

    public long Current_term
    {
      get
      {
        return _current_term;
      }
      set
      {
        __isset.current_term = true;
        this._current_term = value;
      }
    }

    public string Leader_addr
    {
      get
      {
        return _leader_addr;
      }
      set
      {
        __isset.leader_addr = true;
        this._leader_addr = value;
      }
    }

    public int Leader_port
    {
      get
      {
        return _leader_port;
      }
      set
      {
        __isset.leader_port = true;
        this._leader_port = value;
      }
    }

    public long Committed_log_id
    {
      get
      {
        return _committed_log_id;
      }
      set
      {
        __isset.committed_log_id = true;
        this._committed_log_id = value;
      }
    }

    public long Last_matched_log_id
    {
      get
      {
        return _last_matched_log_id;
      }
      set
      {
        __isset.last_matched_log_id = true;
        this._last_matched_log_id = value;
      }
    }

    public long Last_matched_log_term
    {
      get
      {
        return _last_matched_log_term;
      }
      set
      {
        __isset.last_matched_log_term = true;
        this._last_matched_log_term = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool error_code;
      public bool current_term;
      public bool leader_addr;
      public bool leader_port;
      public bool committed_log_id;
      public bool last_matched_log_id;
      public bool last_matched_log_term;
    }

    public AppendLogResponse()
    {
    }

    public AppendLogResponse DeepCopy()
    {
      var tmp24 = new AppendLogResponse();
      if(__isset.error_code)
      {
        tmp24.Error_code = this.Error_code;
      }
      tmp24.__isset.error_code = this.__isset.error_code;
      if(__isset.current_term)
      {
        tmp24.Current_term = this.Current_term;
      }
      tmp24.__isset.current_term = this.__isset.current_term;
      if((Leader_addr != null) && __isset.leader_addr)
      {
        tmp24.Leader_addr = this.Leader_addr;
      }
      tmp24.__isset.leader_addr = this.__isset.leader_addr;
      if(__isset.leader_port)
      {
        tmp24.Leader_port = this.Leader_port;
      }
      tmp24.__isset.leader_port = this.__isset.leader_port;
      if(__isset.committed_log_id)
      {
        tmp24.Committed_log_id = this.Committed_log_id;
      }
      tmp24.__isset.committed_log_id = this.__isset.committed_log_id;
      if(__isset.last_matched_log_id)
      {
        tmp24.Last_matched_log_id = this.Last_matched_log_id;
      }
      tmp24.__isset.last_matched_log_id = this.__isset.last_matched_log_id;
      if(__isset.last_matched_log_term)
      {
        tmp24.Last_matched_log_term = this.Last_matched_log_term;
      }
      tmp24.__isset.last_matched_log_term = this.__isset.last_matched_log_term;
      return tmp24;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Error_code = (global::Nebula.Common.ErrorCode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Current_term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Leader_addr = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Leader_port = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Committed_log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Last_matched_log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                Last_matched_log_term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp25 = new TStruct("AppendLogResponse");
        await oprot.WriteStructBeginAsync(tmp25, cancellationToken);
        var tmp26 = new TField();
        if(__isset.error_code)
        {
          tmp26.Name = "error_code";
          tmp26.Type = TType.I32;
          tmp26.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI32Async((int)Error_code, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.current_term)
        {
          tmp26.Name = "current_term";
          tmp26.Type = TType.I64;
          tmp26.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(Current_term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Leader_addr != null) && __isset.leader_addr)
        {
          tmp26.Name = "leader_addr";
          tmp26.Type = TType.String;
          tmp26.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteStringAsync(Leader_addr, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.leader_port)
        {
          tmp26.Name = "leader_port";
          tmp26.Type = TType.I32;
          tmp26.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI32Async(Leader_port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.committed_log_id)
        {
          tmp26.Name = "committed_log_id";
          tmp26.Type = TType.I64;
          tmp26.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(Committed_log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_matched_log_id)
        {
          tmp26.Name = "last_matched_log_id";
          tmp26.Type = TType.I64;
          tmp26.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(Last_matched_log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_matched_log_term)
        {
          tmp26.Name = "last_matched_log_term";
          tmp26.Type = TType.I64;
          tmp26.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(Last_matched_log_term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AppendLogResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.error_code == other.__isset.error_code) && ((!__isset.error_code) || (System.Object.Equals(Error_code, other.Error_code))))
        && ((__isset.current_term == other.__isset.current_term) && ((!__isset.current_term) || (System.Object.Equals(Current_term, other.Current_term))))
        && ((__isset.leader_addr == other.__isset.leader_addr) && ((!__isset.leader_addr) || (System.Object.Equals(Leader_addr, other.Leader_addr))))
        && ((__isset.leader_port == other.__isset.leader_port) && ((!__isset.leader_port) || (System.Object.Equals(Leader_port, other.Leader_port))))
        && ((__isset.committed_log_id == other.__isset.committed_log_id) && ((!__isset.committed_log_id) || (System.Object.Equals(Committed_log_id, other.Committed_log_id))))
        && ((__isset.last_matched_log_id == other.__isset.last_matched_log_id) && ((!__isset.last_matched_log_id) || (System.Object.Equals(Last_matched_log_id, other.Last_matched_log_id))))
        && ((__isset.last_matched_log_term == other.__isset.last_matched_log_term) && ((!__isset.last_matched_log_term) || (System.Object.Equals(Last_matched_log_term, other.Last_matched_log_term))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.error_code)
        {
          hashcode = (hashcode * 397) + Error_code.GetHashCode();
        }
        if(__isset.current_term)
        {
          hashcode = (hashcode * 397) + Current_term.GetHashCode();
        }
        if((Leader_addr != null) && __isset.leader_addr)
        {
          hashcode = (hashcode * 397) + Leader_addr.GetHashCode();
        }
        if(__isset.leader_port)
        {
          hashcode = (hashcode * 397) + Leader_port.GetHashCode();
        }
        if(__isset.committed_log_id)
        {
          hashcode = (hashcode * 397) + Committed_log_id.GetHashCode();
        }
        if(__isset.last_matched_log_id)
        {
          hashcode = (hashcode * 397) + Last_matched_log_id.GetHashCode();
        }
        if(__isset.last_matched_log_term)
        {
          hashcode = (hashcode * 397) + Last_matched_log_term.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp27 = new StringBuilder("AppendLogResponse(");
      int tmp28 = 0;
      if(__isset.error_code)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Error_code: ");
        Error_code.ToString(tmp27);
      }
      if(__isset.current_term)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Current_term: ");
        Current_term.ToString(tmp27);
      }
      if((Leader_addr != null) && __isset.leader_addr)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Leader_addr: ");
        Leader_addr.ToString(tmp27);
      }
      if(__isset.leader_port)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Leader_port: ");
        Leader_port.ToString(tmp27);
      }
      if(__isset.committed_log_id)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Committed_log_id: ");
        Committed_log_id.ToString(tmp27);
      }
      if(__isset.last_matched_log_id)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Last_matched_log_id: ");
        Last_matched_log_id.ToString(tmp27);
      }
      if(__isset.last_matched_log_term)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Last_matched_log_term: ");
        Last_matched_log_term.ToString(tmp27);
      }
      tmp27.Append(')');
      return tmp27.ToString();
    }
  }

}
