/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Raftex
{

  public partial class GetStateResponse : TBase
  {
    private global::Nebula.Common.ErrorCode _error_code;
    private global::Nebula.Raftex.Role _role;
    private long _term;
    private bool _is_leader;
    private long _committed_log_id;
    private long _last_log_id;
    private long _last_log_term;
    private global::Nebula.Raftex.Status _status;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Common.ErrorCode"/>
    /// </summary>
    public global::Nebula.Common.ErrorCode Error_code
    {
      get
      {
        return _error_code;
      }
      set
      {
        __isset.error_code = true;
        this._error_code = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Raftex.Role"/>
    /// </summary>
    public global::Nebula.Raftex.Role Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    public long Term
    {
      get
      {
        return _term;
      }
      set
      {
        __isset.term = true;
        this._term = value;
      }
    }

    public bool Is_leader
    {
      get
      {
        return _is_leader;
      }
      set
      {
        __isset.is_leader = true;
        this._is_leader = value;
      }
    }

    public long Committed_log_id
    {
      get
      {
        return _committed_log_id;
      }
      set
      {
        __isset.committed_log_id = true;
        this._committed_log_id = value;
      }
    }

    public long Last_log_id
    {
      get
      {
        return _last_log_id;
      }
      set
      {
        __isset.last_log_id = true;
        this._last_log_id = value;
      }
    }

    public long Last_log_term
    {
      get
      {
        return _last_log_term;
      }
      set
      {
        __isset.last_log_term = true;
        this._last_log_term = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Raftex.Status"/>
    /// </summary>
    public global::Nebula.Raftex.Status Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool error_code;
      public bool role;
      public bool term;
      public bool is_leader;
      public bool committed_log_id;
      public bool last_log_id;
      public bool last_log_term;
      public bool status;
    }

    public GetStateResponse()
    {
    }

    public GetStateResponse DeepCopy()
    {
      var tmp58 = new GetStateResponse();
      if(__isset.error_code)
      {
        tmp58.Error_code = this.Error_code;
      }
      tmp58.__isset.error_code = this.__isset.error_code;
      if(__isset.role)
      {
        tmp58.Role = this.Role;
      }
      tmp58.__isset.role = this.__isset.role;
      if(__isset.term)
      {
        tmp58.Term = this.Term;
      }
      tmp58.__isset.term = this.__isset.term;
      if(__isset.is_leader)
      {
        tmp58.Is_leader = this.Is_leader;
      }
      tmp58.__isset.is_leader = this.__isset.is_leader;
      if(__isset.committed_log_id)
      {
        tmp58.Committed_log_id = this.Committed_log_id;
      }
      tmp58.__isset.committed_log_id = this.__isset.committed_log_id;
      if(__isset.last_log_id)
      {
        tmp58.Last_log_id = this.Last_log_id;
      }
      tmp58.__isset.last_log_id = this.__isset.last_log_id;
      if(__isset.last_log_term)
      {
        tmp58.Last_log_term = this.Last_log_term;
      }
      tmp58.__isset.last_log_term = this.__isset.last_log_term;
      if(__isset.status)
      {
        tmp58.Status = this.Status;
      }
      tmp58.__isset.status = this.__isset.status;
      return tmp58;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Error_code = (global::Nebula.Common.ErrorCode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Role = (global::Nebula.Raftex.Role)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Is_leader = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Committed_log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Last_log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                Last_log_term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Status = (global::Nebula.Raftex.Status)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp59 = new TStruct("GetStateResponse");
        await oprot.WriteStructBeginAsync(tmp59, cancellationToken);
        var tmp60 = new TField();
        if(__isset.error_code)
        {
          tmp60.Name = "error_code";
          tmp60.Type = TType.I32;
          tmp60.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI32Async((int)Error_code, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.role)
        {
          tmp60.Name = "role";
          tmp60.Type = TType.I32;
          tmp60.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI32Async((int)Role, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.term)
        {
          tmp60.Name = "term";
          tmp60.Type = TType.I64;
          tmp60.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI64Async(Term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.is_leader)
        {
          tmp60.Name = "is_leader";
          tmp60.Type = TType.Bool;
          tmp60.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteBoolAsync(Is_leader, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.committed_log_id)
        {
          tmp60.Name = "committed_log_id";
          tmp60.Type = TType.I64;
          tmp60.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI64Async(Committed_log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_log_id)
        {
          tmp60.Name = "last_log_id";
          tmp60.Type = TType.I64;
          tmp60.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI64Async(Last_log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_log_term)
        {
          tmp60.Name = "last_log_term";
          tmp60.Type = TType.I64;
          tmp60.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI64Async(Last_log_term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp60.Name = "status";
          tmp60.Type = TType.I32;
          tmp60.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetStateResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.error_code == other.__isset.error_code) && ((!__isset.error_code) || (System.Object.Equals(Error_code, other.Error_code))))
        && ((__isset.role == other.__isset.role) && ((!__isset.role) || (System.Object.Equals(Role, other.Role))))
        && ((__isset.term == other.__isset.term) && ((!__isset.term) || (System.Object.Equals(Term, other.Term))))
        && ((__isset.is_leader == other.__isset.is_leader) && ((!__isset.is_leader) || (System.Object.Equals(Is_leader, other.Is_leader))))
        && ((__isset.committed_log_id == other.__isset.committed_log_id) && ((!__isset.committed_log_id) || (System.Object.Equals(Committed_log_id, other.Committed_log_id))))
        && ((__isset.last_log_id == other.__isset.last_log_id) && ((!__isset.last_log_id) || (System.Object.Equals(Last_log_id, other.Last_log_id))))
        && ((__isset.last_log_term == other.__isset.last_log_term) && ((!__isset.last_log_term) || (System.Object.Equals(Last_log_term, other.Last_log_term))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.error_code)
        {
          hashcode = (hashcode * 397) + Error_code.GetHashCode();
        }
        if(__isset.role)
        {
          hashcode = (hashcode * 397) + Role.GetHashCode();
        }
        if(__isset.term)
        {
          hashcode = (hashcode * 397) + Term.GetHashCode();
        }
        if(__isset.is_leader)
        {
          hashcode = (hashcode * 397) + Is_leader.GetHashCode();
        }
        if(__isset.committed_log_id)
        {
          hashcode = (hashcode * 397) + Committed_log_id.GetHashCode();
        }
        if(__isset.last_log_id)
        {
          hashcode = (hashcode * 397) + Last_log_id.GetHashCode();
        }
        if(__isset.last_log_term)
        {
          hashcode = (hashcode * 397) + Last_log_term.GetHashCode();
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp61 = new StringBuilder("GetStateResponse(");
      int tmp62 = 0;
      if(__isset.error_code)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Error_code: ");
        Error_code.ToString(tmp61);
      }
      if(__isset.role)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Role: ");
        Role.ToString(tmp61);
      }
      if(__isset.term)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Term: ");
        Term.ToString(tmp61);
      }
      if(__isset.is_leader)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Is_leader: ");
        Is_leader.ToString(tmp61);
      }
      if(__isset.committed_log_id)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Committed_log_id: ");
        Committed_log_id.ToString(tmp61);
      }
      if(__isset.last_log_id)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Last_log_id: ");
        Last_log_id.ToString(tmp61);
      }
      if(__isset.last_log_term)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Last_log_term: ");
        Last_log_term.ToString(tmp61);
      }
      if(__isset.status)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Status: ");
        Status.ToString(tmp61);
      }
      tmp61.Append(')');
      return tmp61.ToString();
    }
  }

}
