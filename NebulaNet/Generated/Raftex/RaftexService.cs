/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Raftex
{
  public partial class RaftexService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Nebula.Raftex.GetStateResponse> getState(global::Nebula.Raftex.GetStateRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default)
      {
        await send_askForVote(req, cancellationToken);
        return await recv_askForVote(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_askForVote(global::Nebula.Raftex.AskForVoteRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp63 = new InternalStructs.askForVote_args() {
          Req = req,
        };
        
        await tmp63.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AskForVoteResponse> recv_askForVote(CancellationToken cancellationToken = default)
      {
        
        var tmp64 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp64.Type == TMessageType.Exception)
        {
          var tmp65 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp65;
        }

        var tmp66 = new InternalStructs.askForVote_result();
        await tmp66.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp66.__isset.success)
        {
          return tmp66.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "askForVote failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default)
      {
        await send_appendLog(req, cancellationToken);
        return await recv_appendLog(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_appendLog(global::Nebula.Raftex.AppendLogRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp67 = new InternalStructs.appendLog_args() {
          Req = req,
        };
        
        await tmp67.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.AppendLogResponse> recv_appendLog(CancellationToken cancellationToken = default)
      {
        
        var tmp68 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp68.Type == TMessageType.Exception)
        {
          var tmp69 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp69;
        }

        var tmp70 = new InternalStructs.appendLog_result();
        await tmp70.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp70.__isset.success)
        {
          return tmp70.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "appendLog failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default)
      {
        await send_sendSnapshot(req, cancellationToken);
        return await recv_sendSnapshot(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_sendSnapshot(global::Nebula.Raftex.SendSnapshotRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp71 = new InternalStructs.sendSnapshot_args() {
          Req = req,
        };
        
        await tmp71.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.SendSnapshotResponse> recv_sendSnapshot(CancellationToken cancellationToken = default)
      {
        
        var tmp72 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp72.Type == TMessageType.Exception)
        {
          var tmp73 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp73;
        }

        var tmp74 = new InternalStructs.sendSnapshot_result();
        await tmp74.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp74.__isset.success)
        {
          return tmp74.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendSnapshot failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default)
      {
        await send_heartbeat(req, cancellationToken);
        return await recv_heartbeat(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_heartbeat(global::Nebula.Raftex.HeartbeatRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp75 = new InternalStructs.heartbeat_args() {
          Req = req,
        };
        
        await tmp75.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.HeartbeatResponse> recv_heartbeat(CancellationToken cancellationToken = default)
      {
        
        var tmp76 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp76.Type == TMessageType.Exception)
        {
          var tmp77 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp77;
        }

        var tmp78 = new InternalStructs.heartbeat_result();
        await tmp78.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp78.__isset.success)
        {
          return tmp78.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.GetStateResponse> getState(global::Nebula.Raftex.GetStateRequest req, CancellationToken cancellationToken = default)
      {
        await send_getState(req, cancellationToken);
        return await recv_getState(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getState(global::Nebula.Raftex.GetStateRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getState", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp79 = new InternalStructs.getState_args() {
          Req = req,
        };
        
        await tmp79.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Nebula.Raftex.GetStateResponse> recv_getState(CancellationToken cancellationToken = default)
      {
        
        var tmp80 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp80.Type == TMessageType.Exception)
        {
          var tmp81 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp81;
        }

        var tmp82 = new InternalStructs.getState_result();
        await tmp82.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp82.__isset.success)
        {
          return tmp82.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getState failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["askForVote"] = askForVote_ProcessAsync;
        processMap_["appendLog"] = appendLog_ProcessAsync;
        processMap_["sendSnapshot"] = sendSnapshot_ProcessAsync;
        processMap_["heartbeat"] = heartbeat_ProcessAsync;
        processMap_["getState"] = getState_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task askForVote_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp83 = new InternalStructs.askForVote_args();
        await tmp83.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp84 = new InternalStructs.askForVote_result();
        try
        {
          tmp84.Success = await _iAsync.askForVote(tmp83.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Reply, seqid), cancellationToken); 
          await tmp84.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp85)
        {
          var tmp86 = $"Error occurred in {GetType().FullName}: {tmp85.Message}";
          if(_logger != null)
            _logger.LogError(tmp85, tmp86);
          else
            Console.Error.WriteLine(tmp86);
          var tmp87 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("askForVote", TMessageType.Exception, seqid), cancellationToken);
          await tmp87.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task appendLog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp88 = new InternalStructs.appendLog_args();
        await tmp88.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp89 = new InternalStructs.appendLog_result();
        try
        {
          tmp89.Success = await _iAsync.appendLog(tmp88.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Reply, seqid), cancellationToken); 
          await tmp89.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp90)
        {
          var tmp91 = $"Error occurred in {GetType().FullName}: {tmp90.Message}";
          if(_logger != null)
            _logger.LogError(tmp90, tmp91);
          else
            Console.Error.WriteLine(tmp91);
          var tmp92 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("appendLog", TMessageType.Exception, seqid), cancellationToken);
          await tmp92.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task sendSnapshot_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp93 = new InternalStructs.sendSnapshot_args();
        await tmp93.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp94 = new InternalStructs.sendSnapshot_result();
        try
        {
          tmp94.Success = await _iAsync.sendSnapshot(tmp93.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Reply, seqid), cancellationToken); 
          await tmp94.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp95)
        {
          var tmp96 = $"Error occurred in {GetType().FullName}: {tmp95.Message}";
          if(_logger != null)
            _logger.LogError(tmp95, tmp96);
          else
            Console.Error.WriteLine(tmp96);
          var tmp97 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("sendSnapshot", TMessageType.Exception, seqid), cancellationToken);
          await tmp97.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task heartbeat_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp98 = new InternalStructs.heartbeat_args();
        await tmp98.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp99 = new InternalStructs.heartbeat_result();
        try
        {
          tmp99.Success = await _iAsync.heartbeat(tmp98.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Reply, seqid), cancellationToken); 
          await tmp99.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp100)
        {
          var tmp101 = $"Error occurred in {GetType().FullName}: {tmp100.Message}";
          if(_logger != null)
            _logger.LogError(tmp100, tmp101);
          else
            Console.Error.WriteLine(tmp101);
          var tmp102 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("heartbeat", TMessageType.Exception, seqid), cancellationToken);
          await tmp102.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getState_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp103 = new InternalStructs.getState_args();
        await tmp103.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp104 = new InternalStructs.getState_result();
        try
        {
          tmp104.Success = await _iAsync.getState(tmp103.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getState", TMessageType.Reply, seqid), cancellationToken); 
          await tmp104.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp105)
        {
          var tmp106 = $"Error occurred in {GetType().FullName}: {tmp105.Message}";
          if(_logger != null)
            _logger.LogError(tmp105, tmp106);
          else
            Console.Error.WriteLine(tmp106);
          var tmp107 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getState", TMessageType.Exception, seqid), cancellationToken);
          await tmp107.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class askForVote_args : TBase
      {
        private global::Nebula.Raftex.AskForVoteRequest _req;

        public global::Nebula.Raftex.AskForVoteRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public askForVote_args()
        {
        }

        public askForVote_args DeepCopy()
        {
          var tmp108 = new askForVote_args();
          if((Req != null) && __isset.req)
          {
            tmp108.Req = (global::Nebula.Raftex.AskForVoteRequest)this.Req.DeepCopy();
          }
          tmp108.__isset.req = this.__isset.req;
          return tmp108;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.AskForVoteRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp109 = new TStruct("askForVote_args");
            await oprot.WriteStructBeginAsync(tmp109, cancellationToken);
            var tmp110 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp110.Name = "req";
              tmp110.Type = TType.Struct;
              tmp110.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp110, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is askForVote_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp111 = new StringBuilder("askForVote_args(");
          int tmp112 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp112++) { tmp111.Append(", "); }
            tmp111.Append("Req: ");
            Req.ToString(tmp111);
          }
          tmp111.Append(')');
          return tmp111.ToString();
        }
      }


      public partial class askForVote_result : TBase
      {
        private global::Nebula.Raftex.AskForVoteResponse _success;

        public global::Nebula.Raftex.AskForVoteResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public askForVote_result()
        {
        }

        public askForVote_result DeepCopy()
        {
          var tmp113 = new askForVote_result();
          if((Success != null) && __isset.success)
          {
            tmp113.Success = (global::Nebula.Raftex.AskForVoteResponse)this.Success.DeepCopy();
          }
          tmp113.__isset.success = this.__isset.success;
          return tmp113;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.AskForVoteResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp114 = new TStruct("askForVote_result");
            await oprot.WriteStructBeginAsync(tmp114, cancellationToken);
            var tmp115 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp115.Name = "Success";
                tmp115.Type = TType.Struct;
                tmp115.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp115, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is askForVote_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp116 = new StringBuilder("askForVote_result(");
          int tmp117 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp117++) { tmp116.Append(", "); }
            tmp116.Append("Success: ");
            Success.ToString(tmp116);
          }
          tmp116.Append(')');
          return tmp116.ToString();
        }
      }


      public partial class appendLog_args : TBase
      {
        private global::Nebula.Raftex.AppendLogRequest _req;

        public global::Nebula.Raftex.AppendLogRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public appendLog_args()
        {
        }

        public appendLog_args DeepCopy()
        {
          var tmp118 = new appendLog_args();
          if((Req != null) && __isset.req)
          {
            tmp118.Req = (global::Nebula.Raftex.AppendLogRequest)this.Req.DeepCopy();
          }
          tmp118.__isset.req = this.__isset.req;
          return tmp118;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.AppendLogRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp119 = new TStruct("appendLog_args");
            await oprot.WriteStructBeginAsync(tmp119, cancellationToken);
            var tmp120 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp120.Name = "req";
              tmp120.Type = TType.Struct;
              tmp120.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendLog_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp121 = new StringBuilder("appendLog_args(");
          int tmp122 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp122++) { tmp121.Append(", "); }
            tmp121.Append("Req: ");
            Req.ToString(tmp121);
          }
          tmp121.Append(')');
          return tmp121.ToString();
        }
      }


      public partial class appendLog_result : TBase
      {
        private global::Nebula.Raftex.AppendLogResponse _success;

        public global::Nebula.Raftex.AppendLogResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public appendLog_result()
        {
        }

        public appendLog_result DeepCopy()
        {
          var tmp123 = new appendLog_result();
          if((Success != null) && __isset.success)
          {
            tmp123.Success = (global::Nebula.Raftex.AppendLogResponse)this.Success.DeepCopy();
          }
          tmp123.__isset.success = this.__isset.success;
          return tmp123;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.AppendLogResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp124 = new TStruct("appendLog_result");
            await oprot.WriteStructBeginAsync(tmp124, cancellationToken);
            var tmp125 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp125.Name = "Success";
                tmp125.Type = TType.Struct;
                tmp125.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is appendLog_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp126 = new StringBuilder("appendLog_result(");
          int tmp127 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp127++) { tmp126.Append(", "); }
            tmp126.Append("Success: ");
            Success.ToString(tmp126);
          }
          tmp126.Append(')');
          return tmp126.ToString();
        }
      }


      public partial class sendSnapshot_args : TBase
      {
        private global::Nebula.Raftex.SendSnapshotRequest _req;

        public global::Nebula.Raftex.SendSnapshotRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public sendSnapshot_args()
        {
        }

        public sendSnapshot_args DeepCopy()
        {
          var tmp128 = new sendSnapshot_args();
          if((Req != null) && __isset.req)
          {
            tmp128.Req = (global::Nebula.Raftex.SendSnapshotRequest)this.Req.DeepCopy();
          }
          tmp128.__isset.req = this.__isset.req;
          return tmp128;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.SendSnapshotRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp129 = new TStruct("sendSnapshot_args");
            await oprot.WriteStructBeginAsync(tmp129, cancellationToken);
            var tmp130 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp130.Name = "req";
              tmp130.Type = TType.Struct;
              tmp130.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendSnapshot_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp131 = new StringBuilder("sendSnapshot_args(");
          int tmp132 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp132++) { tmp131.Append(", "); }
            tmp131.Append("Req: ");
            Req.ToString(tmp131);
          }
          tmp131.Append(')');
          return tmp131.ToString();
        }
      }


      public partial class sendSnapshot_result : TBase
      {
        private global::Nebula.Raftex.SendSnapshotResponse _success;

        public global::Nebula.Raftex.SendSnapshotResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public sendSnapshot_result()
        {
        }

        public sendSnapshot_result DeepCopy()
        {
          var tmp133 = new sendSnapshot_result();
          if((Success != null) && __isset.success)
          {
            tmp133.Success = (global::Nebula.Raftex.SendSnapshotResponse)this.Success.DeepCopy();
          }
          tmp133.__isset.success = this.__isset.success;
          return tmp133;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.SendSnapshotResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp134 = new TStruct("sendSnapshot_result");
            await oprot.WriteStructBeginAsync(tmp134, cancellationToken);
            var tmp135 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp135.Name = "Success";
                tmp135.Type = TType.Struct;
                tmp135.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp135, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendSnapshot_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp136 = new StringBuilder("sendSnapshot_result(");
          int tmp137 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp137++) { tmp136.Append(", "); }
            tmp136.Append("Success: ");
            Success.ToString(tmp136);
          }
          tmp136.Append(')');
          return tmp136.ToString();
        }
      }


      public partial class heartbeat_args : TBase
      {
        private global::Nebula.Raftex.HeartbeatRequest _req;

        public global::Nebula.Raftex.HeartbeatRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public heartbeat_args()
        {
        }

        public heartbeat_args DeepCopy()
        {
          var tmp138 = new heartbeat_args();
          if((Req != null) && __isset.req)
          {
            tmp138.Req = (global::Nebula.Raftex.HeartbeatRequest)this.Req.DeepCopy();
          }
          tmp138.__isset.req = this.__isset.req;
          return tmp138;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.HeartbeatRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp139 = new TStruct("heartbeat_args");
            await oprot.WriteStructBeginAsync(tmp139, cancellationToken);
            var tmp140 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp140.Name = "req";
              tmp140.Type = TType.Struct;
              tmp140.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp140, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartbeat_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp141 = new StringBuilder("heartbeat_args(");
          int tmp142 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp142++) { tmp141.Append(", "); }
            tmp141.Append("Req: ");
            Req.ToString(tmp141);
          }
          tmp141.Append(')');
          return tmp141.ToString();
        }
      }


      public partial class heartbeat_result : TBase
      {
        private global::Nebula.Raftex.HeartbeatResponse _success;

        public global::Nebula.Raftex.HeartbeatResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public heartbeat_result()
        {
        }

        public heartbeat_result DeepCopy()
        {
          var tmp143 = new heartbeat_result();
          if((Success != null) && __isset.success)
          {
            tmp143.Success = (global::Nebula.Raftex.HeartbeatResponse)this.Success.DeepCopy();
          }
          tmp143.__isset.success = this.__isset.success;
          return tmp143;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.HeartbeatResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp144 = new TStruct("heartbeat_result");
            await oprot.WriteStructBeginAsync(tmp144, cancellationToken);
            var tmp145 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp145.Name = "Success";
                tmp145.Type = TType.Struct;
                tmp145.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp145, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is heartbeat_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp146 = new StringBuilder("heartbeat_result(");
          int tmp147 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp147++) { tmp146.Append(", "); }
            tmp146.Append("Success: ");
            Success.ToString(tmp146);
          }
          tmp146.Append(')');
          return tmp146.ToString();
        }
      }


      public partial class getState_args : TBase
      {
        private global::Nebula.Raftex.GetStateRequest _req;

        public global::Nebula.Raftex.GetStateRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public getState_args()
        {
        }

        public getState_args DeepCopy()
        {
          var tmp148 = new getState_args();
          if((Req != null) && __isset.req)
          {
            tmp148.Req = (global::Nebula.Raftex.GetStateRequest)this.Req.DeepCopy();
          }
          tmp148.__isset.req = this.__isset.req;
          return tmp148;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Nebula.Raftex.GetStateRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp149 = new TStruct("getState_args");
            await oprot.WriteStructBeginAsync(tmp149, cancellationToken);
            var tmp150 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp150.Name = "req";
              tmp150.Type = TType.Struct;
              tmp150.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp150, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getState_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp151 = new StringBuilder("getState_args(");
          int tmp152 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp152++) { tmp151.Append(", "); }
            tmp151.Append("Req: ");
            Req.ToString(tmp151);
          }
          tmp151.Append(')');
          return tmp151.ToString();
        }
      }


      public partial class getState_result : TBase
      {
        private global::Nebula.Raftex.GetStateResponse _success;

        public global::Nebula.Raftex.GetStateResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getState_result()
        {
        }

        public getState_result DeepCopy()
        {
          var tmp153 = new getState_result();
          if((Success != null) && __isset.success)
          {
            tmp153.Success = (global::Nebula.Raftex.GetStateResponse)this.Success.DeepCopy();
          }
          tmp153.__isset.success = this.__isset.success;
          return tmp153;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Nebula.Raftex.GetStateResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp154 = new TStruct("getState_result");
            await oprot.WriteStructBeginAsync(tmp154, cancellationToken);
            var tmp155 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp155.Name = "Success";
                tmp155.Type = TType.Struct;
                tmp155.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp155, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getState_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp156 = new StringBuilder("getState_result(");
          int tmp157 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp157++) { tmp156.Append(", "); }
            tmp156.Append("Success: ");
            Success.ToString(tmp156);
          }
          tmp156.Append(')');
          return tmp156.ToString();
        }
      }

    }

  }
}
