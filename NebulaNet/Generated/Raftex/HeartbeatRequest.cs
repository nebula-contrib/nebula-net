/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Raftex
{

  public partial class HeartbeatRequest : TBase
  {
    private int _space;
    private int _part;
    private long _current_term;
    private long _committed_log_id;
    private string _leader_addr;
    private int _leader_port;
    private long _last_log_term_sent;
    private long _last_log_id_sent;

    public int Space
    {
      get
      {
        return _space;
      }
      set
      {
        __isset.space = true;
        this._space = value;
      }
    }

    public int Part
    {
      get
      {
        return _part;
      }
      set
      {
        __isset.part = true;
        this._part = value;
      }
    }

    public long Current_term
    {
      get
      {
        return _current_term;
      }
      set
      {
        __isset.current_term = true;
        this._current_term = value;
      }
    }

    public long Committed_log_id
    {
      get
      {
        return _committed_log_id;
      }
      set
      {
        __isset.committed_log_id = true;
        this._committed_log_id = value;
      }
    }

    public string Leader_addr
    {
      get
      {
        return _leader_addr;
      }
      set
      {
        __isset.leader_addr = true;
        this._leader_addr = value;
      }
    }

    public int Leader_port
    {
      get
      {
        return _leader_port;
      }
      set
      {
        __isset.leader_port = true;
        this._leader_port = value;
      }
    }

    public long Last_log_term_sent
    {
      get
      {
        return _last_log_term_sent;
      }
      set
      {
        __isset.last_log_term_sent = true;
        this._last_log_term_sent = value;
      }
    }

    public long Last_log_id_sent
    {
      get
      {
        return _last_log_id_sent;
      }
      set
      {
        __isset.last_log_id_sent = true;
        this._last_log_id_sent = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space;
      public bool part;
      public bool current_term;
      public bool committed_log_id;
      public bool leader_addr;
      public bool leader_port;
      public bool last_log_term_sent;
      public bool last_log_id_sent;
    }

    public HeartbeatRequest()
    {
    }

    public HeartbeatRequest DeepCopy()
    {
      var tmp38 = new HeartbeatRequest();
      if(__isset.space)
      {
        tmp38.Space = this.Space;
      }
      tmp38.__isset.space = this.__isset.space;
      if(__isset.part)
      {
        tmp38.Part = this.Part;
      }
      tmp38.__isset.part = this.__isset.part;
      if(__isset.current_term)
      {
        tmp38.Current_term = this.Current_term;
      }
      tmp38.__isset.current_term = this.__isset.current_term;
      if(__isset.committed_log_id)
      {
        tmp38.Committed_log_id = this.Committed_log_id;
      }
      tmp38.__isset.committed_log_id = this.__isset.committed_log_id;
      if((Leader_addr != null) && __isset.leader_addr)
      {
        tmp38.Leader_addr = this.Leader_addr;
      }
      tmp38.__isset.leader_addr = this.__isset.leader_addr;
      if(__isset.leader_port)
      {
        tmp38.Leader_port = this.Leader_port;
      }
      tmp38.__isset.leader_port = this.__isset.leader_port;
      if(__isset.last_log_term_sent)
      {
        tmp38.Last_log_term_sent = this.Last_log_term_sent;
      }
      tmp38.__isset.last_log_term_sent = this.__isset.last_log_term_sent;
      if(__isset.last_log_id_sent)
      {
        tmp38.Last_log_id_sent = this.Last_log_id_sent;
      }
      tmp38.__isset.last_log_id_sent = this.__isset.last_log_id_sent;
      return tmp38;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Part = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Current_term = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Committed_log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Leader_addr = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Leader_port = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                Last_log_term_sent = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I64)
              {
                Last_log_id_sent = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp39 = new TStruct("HeartbeatRequest");
        await oprot.WriteStructBeginAsync(tmp39, cancellationToken);
        var tmp40 = new TField();
        if(__isset.space)
        {
          tmp40.Name = "space";
          tmp40.Type = TType.I32;
          tmp40.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI32Async(Space, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.part)
        {
          tmp40.Name = "part";
          tmp40.Type = TType.I32;
          tmp40.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI32Async(Part, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.current_term)
        {
          tmp40.Name = "current_term";
          tmp40.Type = TType.I64;
          tmp40.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI64Async(Current_term, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.committed_log_id)
        {
          tmp40.Name = "committed_log_id";
          tmp40.Type = TType.I64;
          tmp40.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI64Async(Committed_log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Leader_addr != null) && __isset.leader_addr)
        {
          tmp40.Name = "leader_addr";
          tmp40.Type = TType.String;
          tmp40.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteStringAsync(Leader_addr, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.leader_port)
        {
          tmp40.Name = "leader_port";
          tmp40.Type = TType.I32;
          tmp40.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI32Async(Leader_port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_log_term_sent)
        {
          tmp40.Name = "last_log_term_sent";
          tmp40.Type = TType.I64;
          tmp40.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI64Async(Last_log_term_sent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.last_log_id_sent)
        {
          tmp40.Name = "last_log_id_sent";
          tmp40.Type = TType.I64;
          tmp40.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp40, cancellationToken);
          await oprot.WriteI64Async(Last_log_id_sent, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HeartbeatRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space == other.__isset.space) && ((!__isset.space) || (System.Object.Equals(Space, other.Space))))
        && ((__isset.part == other.__isset.part) && ((!__isset.part) || (System.Object.Equals(Part, other.Part))))
        && ((__isset.current_term == other.__isset.current_term) && ((!__isset.current_term) || (System.Object.Equals(Current_term, other.Current_term))))
        && ((__isset.committed_log_id == other.__isset.committed_log_id) && ((!__isset.committed_log_id) || (System.Object.Equals(Committed_log_id, other.Committed_log_id))))
        && ((__isset.leader_addr == other.__isset.leader_addr) && ((!__isset.leader_addr) || (System.Object.Equals(Leader_addr, other.Leader_addr))))
        && ((__isset.leader_port == other.__isset.leader_port) && ((!__isset.leader_port) || (System.Object.Equals(Leader_port, other.Leader_port))))
        && ((__isset.last_log_term_sent == other.__isset.last_log_term_sent) && ((!__isset.last_log_term_sent) || (System.Object.Equals(Last_log_term_sent, other.Last_log_term_sent))))
        && ((__isset.last_log_id_sent == other.__isset.last_log_id_sent) && ((!__isset.last_log_id_sent) || (System.Object.Equals(Last_log_id_sent, other.Last_log_id_sent))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space)
        {
          hashcode = (hashcode * 397) + Space.GetHashCode();
        }
        if(__isset.part)
        {
          hashcode = (hashcode * 397) + Part.GetHashCode();
        }
        if(__isset.current_term)
        {
          hashcode = (hashcode * 397) + Current_term.GetHashCode();
        }
        if(__isset.committed_log_id)
        {
          hashcode = (hashcode * 397) + Committed_log_id.GetHashCode();
        }
        if((Leader_addr != null) && __isset.leader_addr)
        {
          hashcode = (hashcode * 397) + Leader_addr.GetHashCode();
        }
        if(__isset.leader_port)
        {
          hashcode = (hashcode * 397) + Leader_port.GetHashCode();
        }
        if(__isset.last_log_term_sent)
        {
          hashcode = (hashcode * 397) + Last_log_term_sent.GetHashCode();
        }
        if(__isset.last_log_id_sent)
        {
          hashcode = (hashcode * 397) + Last_log_id_sent.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp41 = new StringBuilder("HeartbeatRequest(");
      int tmp42 = 0;
      if(__isset.space)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Space: ");
        Space.ToString(tmp41);
      }
      if(__isset.part)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Part: ");
        Part.ToString(tmp41);
      }
      if(__isset.current_term)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Current_term: ");
        Current_term.ToString(tmp41);
      }
      if(__isset.committed_log_id)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Committed_log_id: ");
        Committed_log_id.ToString(tmp41);
      }
      if((Leader_addr != null) && __isset.leader_addr)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Leader_addr: ");
        Leader_addr.ToString(tmp41);
      }
      if(__isset.leader_port)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Leader_port: ");
        Leader_port.ToString(tmp41);
      }
      if(__isset.last_log_term_sent)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Last_log_term_sent: ");
        Last_log_term_sent.ToString(tmp41);
      }
      if(__isset.last_log_id_sent)
      {
        if(0 < tmp42++) { tmp41.Append(", "); }
        tmp41.Append("Last_log_id_sent: ");
        Last_log_id_sent.ToString(tmp41);
      }
      tmp41.Append(')');
      return tmp41.ToString();
    }
  }

}
