/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class LogEntry : TBase
  {
    private long _cluster;
    private byte[] _log_str;

    public long Cluster
    {
      get
      {
        return _cluster;
      }
      set
      {
        __isset.cluster = true;
        this._cluster = value;
      }
    }

    public byte[] Log_str
    {
      get
      {
        return _log_str;
      }
      set
      {
        __isset.log_str = true;
        this._log_str = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool cluster;
      public bool log_str;
    }

    public LogEntry()
    {
    }

    public LogEntry DeepCopy()
    {
      var tmp199 = new LogEntry();
      if(__isset.cluster)
      {
        tmp199.Cluster = this.Cluster;
      }
      tmp199.__isset.cluster = this.__isset.cluster;
      if((Log_str != null) && __isset.log_str)
      {
        tmp199.Log_str = this.Log_str.ToArray();
      }
      tmp199.__isset.log_str = this.__isset.log_str;
      return tmp199;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Cluster = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Log_str = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp200 = new TStruct("LogEntry");
        await oprot.WriteStructBeginAsync(tmp200, cancellationToken);
        var tmp201 = new TField();
        if(__isset.cluster)
        {
          tmp201.Name = "cluster";
          tmp201.Type = TType.I64;
          tmp201.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp201, cancellationToken);
          await oprot.WriteI64Async(Cluster, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Log_str != null) && __isset.log_str)
        {
          tmp201.Name = "log_str";
          tmp201.Type = TType.String;
          tmp201.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp201, cancellationToken);
          await oprot.WriteBinaryAsync(Log_str, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LogEntry other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.cluster == other.__isset.cluster) && ((!__isset.cluster) || (System.Object.Equals(Cluster, other.Cluster))))
        && ((__isset.log_str == other.__isset.log_str) && ((!__isset.log_str) || (TCollections.Equals(Log_str, other.Log_str))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.cluster)
        {
          hashcode = (hashcode * 397) + Cluster.GetHashCode();
        }
        if((Log_str != null) && __isset.log_str)
        {
          hashcode = (hashcode * 397) + Log_str.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp202 = new StringBuilder("LogEntry(");
      int tmp203 = 0;
      if(__isset.cluster)
      {
        if(0 < tmp203++) { tmp202.Append(", "); }
        tmp202.Append("Cluster: ");
        Cluster.ToString(tmp202);
      }
      if((Log_str != null) && __isset.log_str)
      {
        if(0 < tmp203++) { tmp202.Append(", "); }
        tmp202.Append("Log_str: ");
        Log_str.ToString(tmp202);
      }
      tmp202.Append(')');
      return tmp202.ToString();
    }
  }

}
