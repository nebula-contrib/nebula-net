/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class CheckpointInfo : TBase
  {
    private int _space_id;
    private Dictionary<int, global::Nebula.Common.LogInfo> _parts;
    private byte[] _path;

    public int Space_id
    {
      get
      {
        return _space_id;
      }
      set
      {
        __isset.space_id = true;
        this._space_id = value;
      }
    }

    public Dictionary<int, global::Nebula.Common.LogInfo> Parts
    {
      get
      {
        return _parts;
      }
      set
      {
        __isset.parts = true;
        this._parts = value;
      }
    }

    public byte[] Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool space_id;
      public bool parts;
      public bool path;
    }

    public CheckpointInfo()
    {
    }

    public CheckpointInfo DeepCopy()
    {
      var tmp189 = new CheckpointInfo();
      if(__isset.space_id)
      {
        tmp189.Space_id = this.Space_id;
      }
      tmp189.__isset.space_id = this.__isset.space_id;
      if((Parts != null) && __isset.parts)
      {
        tmp189.Parts = this.Parts.DeepCopy();
      }
      tmp189.__isset.parts = this.__isset.parts;
      if((Path != null) && __isset.path)
      {
        tmp189.Path = this.Path.ToArray();
      }
      tmp189.__isset.path = this.__isset.path;
      return tmp189;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Space_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map190 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Parts = new Dictionary<int, global::Nebula.Common.LogInfo>(_map190.Count);
                  for(int _i191 = 0; _i191 < _map190.Count; ++_i191)
                  {
                    int _key192;
                    global::Nebula.Common.LogInfo _val193;
                    _key192 = await iprot.ReadI32Async(cancellationToken);
                    _val193 = new global::Nebula.Common.LogInfo();
                    await _val193.ReadAsync(iprot, cancellationToken);
                    Parts[_key192] = _val193;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Path = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp194 = new TStruct("CheckpointInfo");
        await oprot.WriteStructBeginAsync(tmp194, cancellationToken);
        var tmp195 = new TField();
        if(__isset.space_id)
        {
          tmp195.Name = "space_id";
          tmp195.Type = TType.I32;
          tmp195.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp195, cancellationToken);
          await oprot.WriteI32Async(Space_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parts != null) && __isset.parts)
        {
          tmp195.Name = "parts";
          tmp195.Type = TType.Map;
          tmp195.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp195, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Struct, Parts.Count), cancellationToken);
            foreach (int _iter196 in Parts.Keys)
            {
              await oprot.WriteI32Async(_iter196, cancellationToken);
              await Parts[_iter196].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Path != null) && __isset.path)
        {
          tmp195.Name = "path";
          tmp195.Type = TType.String;
          tmp195.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp195, cancellationToken);
          await oprot.WriteBinaryAsync(Path, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is CheckpointInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.space_id == other.__isset.space_id) && ((!__isset.space_id) || (System.Object.Equals(Space_id, other.Space_id))))
        && ((__isset.parts == other.__isset.parts) && ((!__isset.parts) || (TCollections.Equals(Parts, other.Parts))))
        && ((__isset.path == other.__isset.path) && ((!__isset.path) || (TCollections.Equals(Path, other.Path))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.space_id)
        {
          hashcode = (hashcode * 397) + Space_id.GetHashCode();
        }
        if((Parts != null) && __isset.parts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parts);
        }
        if((Path != null) && __isset.path)
        {
          hashcode = (hashcode * 397) + Path.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp197 = new StringBuilder("CheckpointInfo(");
      int tmp198 = 0;
      if(__isset.space_id)
      {
        if(0 < tmp198++) { tmp197.Append(", "); }
        tmp197.Append("Space_id: ");
        Space_id.ToString(tmp197);
      }
      if((Parts != null) && __isset.parts)
      {
        if(0 < tmp198++) { tmp197.Append(", "); }
        tmp197.Append("Parts: ");
        Parts.ToString(tmp197);
      }
      if((Path != null) && __isset.path)
      {
        if(0 < tmp198++) { tmp197.Append(", "); }
        tmp197.Append("Path: ");
        Path.ToString(tmp197);
      }
      tmp197.Append(')');
      return tmp197.ToString();
    }
  }

}
