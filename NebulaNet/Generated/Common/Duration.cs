/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class Duration : TBase
  {
    private long _seconds;
    private int _microseconds;
    private int _months;

    public long Seconds
    {
      get
      {
        return _seconds;
      }
      set
      {
        __isset.seconds = true;
        this._seconds = value;
      }
    }

    public int Microseconds
    {
      get
      {
        return _microseconds;
      }
      set
      {
        __isset.microseconds = true;
        this._microseconds = value;
      }
    }

    public int Months
    {
      get
      {
        return _months;
      }
      set
      {
        __isset.months = true;
        this._months = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool seconds;
      public bool microseconds;
      public bool months;
    }

    public Duration()
    {
    }

    public Duration DeepCopy()
    {
      var tmp170 = new Duration();
      if(__isset.seconds)
      {
        tmp170.Seconds = this.Seconds;
      }
      tmp170.__isset.seconds = this.__isset.seconds;
      if(__isset.microseconds)
      {
        tmp170.Microseconds = this.Microseconds;
      }
      tmp170.__isset.microseconds = this.__isset.microseconds;
      if(__isset.months)
      {
        tmp170.Months = this.Months;
      }
      tmp170.__isset.months = this.__isset.months;
      return tmp170;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Seconds = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Microseconds = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Months = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp171 = new TStruct("Duration");
        await oprot.WriteStructBeginAsync(tmp171, cancellationToken);
        var tmp172 = new TField();
        if(__isset.seconds)
        {
          tmp172.Name = "seconds";
          tmp172.Type = TType.I64;
          tmp172.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp172, cancellationToken);
          await oprot.WriteI64Async(Seconds, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.microseconds)
        {
          tmp172.Name = "microseconds";
          tmp172.Type = TType.I32;
          tmp172.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp172, cancellationToken);
          await oprot.WriteI32Async(Microseconds, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.months)
        {
          tmp172.Name = "months";
          tmp172.Type = TType.I32;
          tmp172.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp172, cancellationToken);
          await oprot.WriteI32Async(Months, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Duration other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.seconds == other.__isset.seconds) && ((!__isset.seconds) || (System.Object.Equals(Seconds, other.Seconds))))
        && ((__isset.microseconds == other.__isset.microseconds) && ((!__isset.microseconds) || (System.Object.Equals(Microseconds, other.Microseconds))))
        && ((__isset.months == other.__isset.months) && ((!__isset.months) || (System.Object.Equals(Months, other.Months))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.seconds)
        {
          hashcode = (hashcode * 397) + Seconds.GetHashCode();
        }
        if(__isset.microseconds)
        {
          hashcode = (hashcode * 397) + Microseconds.GetHashCode();
        }
        if(__isset.months)
        {
          hashcode = (hashcode * 397) + Months.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp173 = new StringBuilder("Duration(");
      int tmp174 = 0;
      if(__isset.seconds)
      {
        if(0 < tmp174++) { tmp173.Append(", "); }
        tmp173.Append("Seconds: ");
        Seconds.ToString(tmp173);
      }
      if(__isset.microseconds)
      {
        if(0 < tmp174++) { tmp173.Append(", "); }
        tmp173.Append("Microseconds: ");
        Microseconds.ToString(tmp173);
      }
      if(__isset.months)
      {
        if(0 < tmp174++) { tmp173.Append(", "); }
        tmp173.Append("Months: ");
        Months.ToString(tmp173);
      }
      tmp173.Append(')');
      return tmp173.ToString();
    }
  }

}
