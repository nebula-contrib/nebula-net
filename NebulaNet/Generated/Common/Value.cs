/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class @Value : TBase
  {
    private global::Nebula.Common.NullType _nVal;
    private bool _bVal;
    private long _iVal;
    private double _fVal;
    private byte[] _sVal;
    private global::Nebula.Common.Date _dVal;
    private global::Nebula.Common.Time _tVal;
    private global::Nebula.Common.DateTime _dtVal;
    private global::Nebula.Common.Vertex _vVal;
    private global::Nebula.Common.Edge _eVal;
    private global::Nebula.Common.Path _pVal;
    private global::Nebula.Common.NList _lVal;
    private global::Nebula.Common.NMap _mVal;
    private global::Nebula.Common.NSet _uVal;
    private global::Nebula.Common.DataSet _gVal;
    private global::Nebula.Common.Geography _ggVal;
    private global::Nebula.Common.Duration _duVal;

    /// <summary>
    /// 
    /// <seealso cref="global::Nebula.Common.NullType"/>
    /// </summary>
    public global::Nebula.Common.NullType NVal
    {
      get
      {
        return _nVal;
      }
      set
      {
        __isset.nVal = true;
        this._nVal = value;
      }
    }

    public bool BVal
    {
      get
      {
        return _bVal;
      }
      set
      {
        __isset.bVal = true;
        this._bVal = value;
      }
    }

    public long IVal
    {
      get
      {
        return _iVal;
      }
      set
      {
        __isset.iVal = true;
        this._iVal = value;
      }
    }

    public double FVal
    {
      get
      {
        return _fVal;
      }
      set
      {
        __isset.fVal = true;
        this._fVal = value;
      }
    }

    public byte[] SVal
    {
      get
      {
        return _sVal;
      }
      set
      {
        __isset.sVal = true;
        this._sVal = value;
      }
    }

    public global::Nebula.Common.Date DVal
    {
      get
      {
        return _dVal;
      }
      set
      {
        __isset.dVal = true;
        this._dVal = value;
      }
    }

    public global::Nebula.Common.Time TVal
    {
      get
      {
        return _tVal;
      }
      set
      {
        __isset.tVal = true;
        this._tVal = value;
      }
    }

    public global::Nebula.Common.DateTime DtVal
    {
      get
      {
        return _dtVal;
      }
      set
      {
        __isset.dtVal = true;
        this._dtVal = value;
      }
    }

    public global::Nebula.Common.Vertex VVal
    {
      get
      {
        return _vVal;
      }
      set
      {
        __isset.vVal = true;
        this._vVal = value;
      }
    }

    public global::Nebula.Common.Edge EVal
    {
      get
      {
        return _eVal;
      }
      set
      {
        __isset.eVal = true;
        this._eVal = value;
      }
    }

    public global::Nebula.Common.Path PVal
    {
      get
      {
        return _pVal;
      }
      set
      {
        __isset.pVal = true;
        this._pVal = value;
      }
    }

    public global::Nebula.Common.NList LVal
    {
      get
      {
        return _lVal;
      }
      set
      {
        __isset.lVal = true;
        this._lVal = value;
      }
    }

    public global::Nebula.Common.NMap MVal
    {
      get
      {
        return _mVal;
      }
      set
      {
        __isset.mVal = true;
        this._mVal = value;
      }
    }

    public global::Nebula.Common.NSet UVal
    {
      get
      {
        return _uVal;
      }
      set
      {
        __isset.uVal = true;
        this._uVal = value;
      }
    }

    public global::Nebula.Common.DataSet GVal
    {
      get
      {
        return _gVal;
      }
      set
      {
        __isset.gVal = true;
        this._gVal = value;
      }
    }

    public global::Nebula.Common.Geography GgVal
    {
      get
      {
        return _ggVal;
      }
      set
      {
        __isset.ggVal = true;
        this._ggVal = value;
      }
    }

    public global::Nebula.Common.Duration DuVal
    {
      get
      {
        return _duVal;
      }
      set
      {
        __isset.duVal = true;
        this._duVal = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool nVal;
      public bool bVal;
      public bool iVal;
      public bool fVal;
      public bool sVal;
      public bool dVal;
      public bool tVal;
      public bool dtVal;
      public bool vVal;
      public bool eVal;
      public bool pVal;
      public bool lVal;
      public bool mVal;
      public bool uVal;
      public bool gVal;
      public bool ggVal;
      public bool duVal;
    }

    public @Value()
    {
    }

    public @Value DeepCopy()
    {
      var tmp20 = new @Value();
      if(__isset.nVal)
      {
        tmp20.NVal = this.NVal;
      }
      tmp20.__isset.nVal = this.__isset.nVal;
      if(__isset.bVal)
      {
        tmp20.BVal = this.BVal;
      }
      tmp20.__isset.bVal = this.__isset.bVal;
      if(__isset.iVal)
      {
        tmp20.IVal = this.IVal;
      }
      tmp20.__isset.iVal = this.__isset.iVal;
      if(__isset.fVal)
      {
        tmp20.FVal = this.FVal;
      }
      tmp20.__isset.fVal = this.__isset.fVal;
      if((SVal != null) && __isset.sVal)
      {
        tmp20.SVal = this.SVal.ToArray();
      }
      tmp20.__isset.sVal = this.__isset.sVal;
      if((DVal != null) && __isset.dVal)
      {
        tmp20.DVal = (global::Nebula.Common.Date)this.DVal.DeepCopy();
      }
      tmp20.__isset.dVal = this.__isset.dVal;
      if((TVal != null) && __isset.tVal)
      {
        tmp20.TVal = (global::Nebula.Common.Time)this.TVal.DeepCopy();
      }
      tmp20.__isset.tVal = this.__isset.tVal;
      if((DtVal != null) && __isset.dtVal)
      {
        tmp20.DtVal = (global::Nebula.Common.DateTime)this.DtVal.DeepCopy();
      }
      tmp20.__isset.dtVal = this.__isset.dtVal;
      if((VVal != null) && __isset.vVal)
      {
        tmp20.VVal = (global::Nebula.Common.Vertex)this.VVal.DeepCopy();
      }
      tmp20.__isset.vVal = this.__isset.vVal;
      if((EVal != null) && __isset.eVal)
      {
        tmp20.EVal = (global::Nebula.Common.Edge)this.EVal.DeepCopy();
      }
      tmp20.__isset.eVal = this.__isset.eVal;
      if((PVal != null) && __isset.pVal)
      {
        tmp20.PVal = (global::Nebula.Common.Path)this.PVal.DeepCopy();
      }
      tmp20.__isset.pVal = this.__isset.pVal;
      if((LVal != null) && __isset.lVal)
      {
        tmp20.LVal = (global::Nebula.Common.NList)this.LVal.DeepCopy();
      }
      tmp20.__isset.lVal = this.__isset.lVal;
      if((MVal != null) && __isset.mVal)
      {
        tmp20.MVal = (global::Nebula.Common.NMap)this.MVal.DeepCopy();
      }
      tmp20.__isset.mVal = this.__isset.mVal;
      if((UVal != null) && __isset.uVal)
      {
        tmp20.UVal = (global::Nebula.Common.NSet)this.UVal.DeepCopy();
      }
      tmp20.__isset.uVal = this.__isset.uVal;
      if((GVal != null) && __isset.gVal)
      {
        tmp20.GVal = (global::Nebula.Common.DataSet)this.GVal.DeepCopy();
      }
      tmp20.__isset.gVal = this.__isset.gVal;
      if((GgVal != null) && __isset.ggVal)
      {
        tmp20.GgVal = (global::Nebula.Common.Geography)this.GgVal.DeepCopy();
      }
      tmp20.__isset.ggVal = this.__isset.ggVal;
      if((DuVal != null) && __isset.duVal)
      {
        tmp20.DuVal = (global::Nebula.Common.Duration)this.DuVal.DeepCopy();
      }
      tmp20.__isset.duVal = this.__isset.duVal;
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                NVal = (global::Nebula.Common.NullType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                BVal = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                IVal = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                FVal = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                SVal = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                DVal = new global::Nebula.Common.Date();
                await DVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                TVal = new global::Nebula.Common.Time();
                await TVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                DtVal = new global::Nebula.Common.DateTime();
                await DtVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Struct)
              {
                VVal = new global::Nebula.Common.Vertex();
                await VVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                EVal = new global::Nebula.Common.Edge();
                await EVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Struct)
              {
                PVal = new global::Nebula.Common.Path();
                await PVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Struct)
              {
                LVal = new global::Nebula.Common.NList();
                await LVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Struct)
              {
                MVal = new global::Nebula.Common.NMap();
                await MVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Struct)
              {
                UVal = new global::Nebula.Common.NSet();
                await UVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.Struct)
              {
                GVal = new global::Nebula.Common.DataSet();
                await GVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.Struct)
              {
                GgVal = new global::Nebula.Common.Geography();
                await GgVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.Struct)
              {
                DuVal = new global::Nebula.Common.Duration();
                await DuVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp21 = new TStruct("Value");
        await oprot.WriteStructBeginAsync(tmp21, cancellationToken);
        var tmp22 = new TField();
        if(__isset.nVal)
        {
          tmp22.Name = "nVal";
          tmp22.Type = TType.I32;
          tmp22.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteI32Async((int)NVal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.bVal)
        {
          tmp22.Name = "bVal";
          tmp22.Type = TType.Bool;
          tmp22.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteBoolAsync(BVal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.iVal)
        {
          tmp22.Name = "iVal";
          tmp22.Type = TType.I64;
          tmp22.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteI64Async(IVal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.fVal)
        {
          tmp22.Name = "fVal";
          tmp22.Type = TType.Double;
          tmp22.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteDoubleAsync(FVal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SVal != null) && __isset.sVal)
        {
          tmp22.Name = "sVal";
          tmp22.Type = TType.String;
          tmp22.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await oprot.WriteBinaryAsync(SVal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DVal != null) && __isset.dVal)
        {
          tmp22.Name = "dVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await DVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TVal != null) && __isset.tVal)
        {
          tmp22.Name = "tVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await TVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DtVal != null) && __isset.dtVal)
        {
          tmp22.Name = "dtVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await DtVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((VVal != null) && __isset.vVal)
        {
          tmp22.Name = "vVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await VVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((EVal != null) && __isset.eVal)
        {
          tmp22.Name = "eVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await EVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((PVal != null) && __isset.pVal)
        {
          tmp22.Name = "pVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await PVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LVal != null) && __isset.lVal)
        {
          tmp22.Name = "lVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await LVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MVal != null) && __isset.mVal)
        {
          tmp22.Name = "mVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await MVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UVal != null) && __isset.uVal)
        {
          tmp22.Name = "uVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await UVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GVal != null) && __isset.gVal)
        {
          tmp22.Name = "gVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await GVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GgVal != null) && __isset.ggVal)
        {
          tmp22.Name = "ggVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 16;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await GgVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DuVal != null) && __isset.duVal)
        {
          tmp22.Name = "duVal";
          tmp22.Type = TType.Struct;
          tmp22.ID = 17;
          await oprot.WriteFieldBeginAsync(tmp22, cancellationToken);
          await DuVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is @Value other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.nVal == other.__isset.nVal) && ((!__isset.nVal) || (System.Object.Equals(NVal, other.NVal))))
        && ((__isset.bVal == other.__isset.bVal) && ((!__isset.bVal) || (System.Object.Equals(BVal, other.BVal))))
        && ((__isset.iVal == other.__isset.iVal) && ((!__isset.iVal) || (System.Object.Equals(IVal, other.IVal))))
        && ((__isset.fVal == other.__isset.fVal) && ((!__isset.fVal) || (System.Object.Equals(FVal, other.FVal))))
        && ((__isset.sVal == other.__isset.sVal) && ((!__isset.sVal) || (TCollections.Equals(SVal, other.SVal))))
        && ((__isset.dVal == other.__isset.dVal) && ((!__isset.dVal) || (System.Object.Equals(DVal, other.DVal))))
        && ((__isset.tVal == other.__isset.tVal) && ((!__isset.tVal) || (System.Object.Equals(TVal, other.TVal))))
        && ((__isset.dtVal == other.__isset.dtVal) && ((!__isset.dtVal) || (System.Object.Equals(DtVal, other.DtVal))))
        && ((__isset.vVal == other.__isset.vVal) && ((!__isset.vVal) || (System.Object.Equals(VVal, other.VVal))))
        && ((__isset.eVal == other.__isset.eVal) && ((!__isset.eVal) || (System.Object.Equals(EVal, other.EVal))))
        && ((__isset.pVal == other.__isset.pVal) && ((!__isset.pVal) || (System.Object.Equals(PVal, other.PVal))))
        && ((__isset.lVal == other.__isset.lVal) && ((!__isset.lVal) || (System.Object.Equals(LVal, other.LVal))))
        && ((__isset.mVal == other.__isset.mVal) && ((!__isset.mVal) || (System.Object.Equals(MVal, other.MVal))))
        && ((__isset.uVal == other.__isset.uVal) && ((!__isset.uVal) || (System.Object.Equals(UVal, other.UVal))))
        && ((__isset.gVal == other.__isset.gVal) && ((!__isset.gVal) || (System.Object.Equals(GVal, other.GVal))))
        && ((__isset.ggVal == other.__isset.ggVal) && ((!__isset.ggVal) || (System.Object.Equals(GgVal, other.GgVal))))
        && ((__isset.duVal == other.__isset.duVal) && ((!__isset.duVal) || (System.Object.Equals(DuVal, other.DuVal))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.nVal)
        {
          hashcode = (hashcode * 397) + NVal.GetHashCode();
        }
        if(__isset.bVal)
        {
          hashcode = (hashcode * 397) + BVal.GetHashCode();
        }
        if(__isset.iVal)
        {
          hashcode = (hashcode * 397) + IVal.GetHashCode();
        }
        if(__isset.fVal)
        {
          hashcode = (hashcode * 397) + FVal.GetHashCode();
        }
        if((SVal != null) && __isset.sVal)
        {
          hashcode = (hashcode * 397) + SVal.GetHashCode();
        }
        if((DVal != null) && __isset.dVal)
        {
          hashcode = (hashcode * 397) + DVal.GetHashCode();
        }
        if((TVal != null) && __isset.tVal)
        {
          hashcode = (hashcode * 397) + TVal.GetHashCode();
        }
        if((DtVal != null) && __isset.dtVal)
        {
          hashcode = (hashcode * 397) + DtVal.GetHashCode();
        }
        if((VVal != null) && __isset.vVal)
        {
          hashcode = (hashcode * 397) + VVal.GetHashCode();
        }
        if((EVal != null) && __isset.eVal)
        {
          hashcode = (hashcode * 397) + EVal.GetHashCode();
        }
        if((PVal != null) && __isset.pVal)
        {
          hashcode = (hashcode * 397) + PVal.GetHashCode();
        }
        if((LVal != null) && __isset.lVal)
        {
          hashcode = (hashcode * 397) + LVal.GetHashCode();
        }
        if((MVal != null) && __isset.mVal)
        {
          hashcode = (hashcode * 397) + MVal.GetHashCode();
        }
        if((UVal != null) && __isset.uVal)
        {
          hashcode = (hashcode * 397) + UVal.GetHashCode();
        }
        if((GVal != null) && __isset.gVal)
        {
          hashcode = (hashcode * 397) + GVal.GetHashCode();
        }
        if((GgVal != null) && __isset.ggVal)
        {
          hashcode = (hashcode * 397) + GgVal.GetHashCode();
        }
        if((DuVal != null) && __isset.duVal)
        {
          hashcode = (hashcode * 397) + DuVal.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp23 = new StringBuilder("Value(");
      int tmp24 = 0;
      if(__isset.nVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("NVal: ");
        NVal.ToString(tmp23);
      }
      if(__isset.bVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("BVal: ");
        BVal.ToString(tmp23);
      }
      if(__isset.iVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("IVal: ");
        IVal.ToString(tmp23);
      }
      if(__isset.fVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("FVal: ");
        FVal.ToString(tmp23);
      }
      if((SVal != null) && __isset.sVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("SVal: ");
        SVal.ToString(tmp23);
      }
      if((DVal != null) && __isset.dVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("DVal: ");
        DVal.ToString(tmp23);
      }
      if((TVal != null) && __isset.tVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("TVal: ");
        TVal.ToString(tmp23);
      }
      if((DtVal != null) && __isset.dtVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("DtVal: ");
        DtVal.ToString(tmp23);
      }
      if((VVal != null) && __isset.vVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("VVal: ");
        VVal.ToString(tmp23);
      }
      if((EVal != null) && __isset.eVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("EVal: ");
        EVal.ToString(tmp23);
      }
      if((PVal != null) && __isset.pVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("PVal: ");
        PVal.ToString(tmp23);
      }
      if((LVal != null) && __isset.lVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("LVal: ");
        LVal.ToString(tmp23);
      }
      if((MVal != null) && __isset.mVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("MVal: ");
        MVal.ToString(tmp23);
      }
      if((UVal != null) && __isset.uVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("UVal: ");
        UVal.ToString(tmp23);
      }
      if((GVal != null) && __isset.gVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("GVal: ");
        GVal.ToString(tmp23);
      }
      if((GgVal != null) && __isset.ggVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("GgVal: ");
        GgVal.ToString(tmp23);
      }
      if((DuVal != null) && __isset.duVal)
      {
        if(0 < tmp24++) { tmp23.Append(", "); }
        tmp23.Append("DuVal: ");
        DuVal.ToString(tmp23);
      }
      tmp23.Append(')');
      return tmp23.ToString();
    }
  }

}
