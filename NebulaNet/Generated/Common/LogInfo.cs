/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Nebula.Common
{

  public partial class LogInfo : TBase
  {
    private long _log_id;
    private long _term_id;

    public long Log_id
    {
      get
      {
        return _log_id;
      }
      set
      {
        __isset.log_id = true;
        this._log_id = value;
      }
    }

    public long Term_id
    {
      get
      {
        return _term_id;
      }
      set
      {
        __isset.term_id = true;
        this._term_id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool log_id;
      public bool term_id;
    }

    public LogInfo()
    {
    }

    public LogInfo DeepCopy()
    {
      var tmp175 = new LogInfo();
      if(__isset.log_id)
      {
        tmp175.Log_id = this.Log_id;
      }
      tmp175.__isset.log_id = this.__isset.log_id;
      if(__isset.term_id)
      {
        tmp175.Term_id = this.Term_id;
      }
      tmp175.__isset.term_id = this.__isset.term_id;
      return tmp175;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Log_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Term_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp176 = new TStruct("LogInfo");
        await oprot.WriteStructBeginAsync(tmp176, cancellationToken);
        var tmp177 = new TField();
        if(__isset.log_id)
        {
          tmp177.Name = "log_id";
          tmp177.Type = TType.I64;
          tmp177.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
          await oprot.WriteI64Async(Log_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.term_id)
        {
          tmp177.Name = "term_id";
          tmp177.Type = TType.I64;
          tmp177.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp177, cancellationToken);
          await oprot.WriteI64Async(Term_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LogInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.log_id == other.__isset.log_id) && ((!__isset.log_id) || (System.Object.Equals(Log_id, other.Log_id))))
        && ((__isset.term_id == other.__isset.term_id) && ((!__isset.term_id) || (System.Object.Equals(Term_id, other.Term_id))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.log_id)
        {
          hashcode = (hashcode * 397) + Log_id.GetHashCode();
        }
        if(__isset.term_id)
        {
          hashcode = (hashcode * 397) + Term_id.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp178 = new StringBuilder("LogInfo(");
      int tmp179 = 0;
      if(__isset.log_id)
      {
        if(0 < tmp179++) { tmp178.Append(", "); }
        tmp178.Append("Log_id: ");
        Log_id.ToString(tmp178);
      }
      if(__isset.term_id)
      {
        if(0 < tmp179++) { tmp178.Append(", "); }
        tmp178.Append("Term_id: ");
        Term_id.ToString(tmp178);
      }
      tmp178.Append(')');
      return tmp178.ToString();
    }
  }

}
